// Attention, this file is generated. Manual changes get lost with the next
// run of the code generation.
// created by yacg (template: golang_types.mako v1.1.0)
package layer


import (
    uuid "github.com/google/uuid"
    optional "okieoth/layer-man/pkg/optional_types"
)


/* A layer definition
*/
type Layer struct {

    Id uuid.UUID

    Name string

    MinZoom optional.Optional[int32]

    MaxZoom optional.Optional[int32]

    Description optional.Optional[string]

    // this attrib has no real value, it's only there to challenge the enum handling
    Dummy OptionalLayerDummyEnum
}

// Creates a Layer object
func MakeLayer() Layer {
    var ret Layer
    // TODO: initialize default values
    return ret
}

type OptionalLayer struct {
	Value Layer
	IsSet bool
}

// Creates a OptionalLayer object
func MakeOptionalLayer() OptionalLayer {
    var ret OptionalLayer
    // TODO: initialize default values
    return ret
}

func (m *OptionalLayer) Set(v Layer) {
	m.Value = v
	m.IsSet = true
}

func (m *OptionalLayer) UnSet() {
	m.IsSet = false
}


type LayerDummyEnum string

const (
    LayerDummyEnum_value1 LayerDummyEnum = "value1"
    LayerDummyEnum_value2 = "value2"
    LayerDummyEnum_value3 = "value3"
)


type OptionalLayerDummyEnum struct {
	Value LayerDummyEnum
	IsSet bool
}

// Creates a OptionalLayerDummyEnum object
func MakeOptionalLayerDummyEnum() OptionalLayerDummyEnum {
    var ret OptionalLayerDummyEnum
    // TODO: initialize default values
    return ret
}

func (m *OptionalLayerDummyEnum) Set(v LayerDummyEnum) {
	m.Value = v
	m.IsSet = true
}

func (m *OptionalLayerDummyEnum) UnSet() {
	m.IsSet = false
}



/* a feature to display
*/
type LayerContent struct {

    Id uuid.UUID

    LayerId optional.Optional[uuid.UUID]

    Projection optional.Optional[string]

    Geometry OptionalGeometry

    // container for additional key/value pairs
    Data optional.Optional[map[string]string]

    Display OptionalDisplayConfig
}

// Creates a LayerContent object
func MakeLayerContent() LayerContent {
    var ret LayerContent
    // TODO: initialize default values
    return ret
}

type OptionalLayerContent struct {
	Value LayerContent
	IsSet bool
}

// Creates a OptionalLayerContent object
func MakeOptionalLayerContent() OptionalLayerContent {
    var ret OptionalLayerContent
    // TODO: initialize default values
    return ret
}

func (m *OptionalLayerContent) Set(v LayerContent) {
	m.Value = v
	m.IsSet = true
}

func (m *OptionalLayerContent) UnSet() {
	m.IsSet = false
}



/* Geometry definition to display the feature
*/
type Geometry struct {

    Point []float64

    // a geometry consisting of multiple separate points
    MultiPoint [][]float64

    // a geometry consisting of multiple connected line segments
    LineString [][]float64

    // a geometry consisting of multiple multi-lines
    MultiLineString [][][]float64

    // a closed geometry consisting of multiple connected line segments
    Polygon [][][]float64

    // a geometry consisting of multiple separate polygons
    MultiPolygon [][][][]float64
}

// Creates a Geometry object
func MakeGeometry() Geometry {
    var ret Geometry
    // TODO: initialize default values
    return ret
}

type OptionalGeometry struct {
	Value Geometry
	IsSet bool
}

// Creates a OptionalGeometry object
func MakeOptionalGeometry() OptionalGeometry {
    var ret OptionalGeometry
    // TODO: initialize default values
    return ret
}

func (m *OptionalGeometry) Set(v Geometry) {
	m.Value = v
	m.IsSet = true
}

func (m *OptionalGeometry) UnSet() {
	m.IsSet = false
}





/* Optional configuration to display a feature
*/
type DisplayConfig struct {

    Stroke OptionalDisplayConfigStroke

    Fill OptionalDisplayConfigFill

    Icon optional.Optional[string]
}

// Creates a DisplayConfig object
func MakeDisplayConfig() DisplayConfig {
    var ret DisplayConfig
    // TODO: initialize default values
    return ret
}

type OptionalDisplayConfig struct {
	Value DisplayConfig
	IsSet bool
}

// Creates a OptionalDisplayConfig object
func MakeOptionalDisplayConfig() OptionalDisplayConfig {
    var ret OptionalDisplayConfig
    // TODO: initialize default values
    return ret
}

func (m *OptionalDisplayConfig) Set(v DisplayConfig) {
	m.Value = v
	m.IsSet = true
}

func (m *OptionalDisplayConfig) UnSet() {
	m.IsSet = false
}



/* The color definition to display a feature
*/
type Color struct {

    Red int32

    Green int32

    Blue int32

    Alpha optional.Optional[int32]
}

// Creates a Color object
func MakeColor() Color {
    var ret Color
    // TODO: initialize default values
    return ret
}

type OptionalColor struct {
	Value Color
	IsSet bool
}

// Creates a OptionalColor object
func MakeOptionalColor() OptionalColor {
    var ret OptionalColor
    // TODO: initialize default values
    return ret
}

func (m *OptionalColor) Set(v Color) {
	m.Value = v
	m.IsSet = true
}

func (m *OptionalColor) UnSet() {
	m.IsSet = false
}



type DisplayConfigStroke struct {

    Width optional.Optional[int32]

    DashArray []int32

    DashOffset optional.Optional[int32]

    Color OptionalColor
}

// Creates a DisplayConfigStroke object
func MakeDisplayConfigStroke() DisplayConfigStroke {
    var ret DisplayConfigStroke
    // TODO: initialize default values
    return ret
}

type OptionalDisplayConfigStroke struct {
	Value DisplayConfigStroke
	IsSet bool
}

// Creates a OptionalDisplayConfigStroke object
func MakeOptionalDisplayConfigStroke() OptionalDisplayConfigStroke {
    var ret OptionalDisplayConfigStroke
    // TODO: initialize default values
    return ret
}

func (m *OptionalDisplayConfigStroke) Set(v DisplayConfigStroke) {
	m.Value = v
	m.IsSet = true
}

func (m *OptionalDisplayConfigStroke) UnSet() {
	m.IsSet = false
}



type DisplayConfigFill struct {

    Color OptionalColor
}

// Creates a DisplayConfigFill object
func MakeDisplayConfigFill() DisplayConfigFill {
    var ret DisplayConfigFill
    // TODO: initialize default values
    return ret
}

type OptionalDisplayConfigFill struct {
	Value DisplayConfigFill
	IsSet bool
}

// Creates a OptionalDisplayConfigFill object
func MakeOptionalDisplayConfigFill() OptionalDisplayConfigFill {
    var ret OptionalDisplayConfigFill
    // TODO: initialize default values
    return ret
}

func (m *OptionalDisplayConfigFill) Set(v DisplayConfigFill) {
	m.Value = v
	m.IsSet = true
}

func (m *OptionalDisplayConfigFill) UnSet() {
	m.IsSet = false
}










